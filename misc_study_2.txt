<latex>~\\<br>Let $\mathcal C$ be a Cartesian category. What is the \emph{strength} for a monad $(T, \eta, \mu)$ on $\mathcal C$?<br></latex>	pg 18784<br>
<latex>~\\<br>Let $\mathcal C$ be a Cartesian category. What is a \emph{distributive coproduct}?<br></latex>	pg 18785<br>
<latex>~\\<br>How does Levy define \emph{context}? What is a \emph{ground context}?<br></latex>	Recall that a ground type is an atomic type: the only such type in CBV with print is bool.<br>pg 18786
<latex>~\\<br>Given two terms $\Gamma \vdash M,M' : B$, what does $M \simeq_{\text{ground}} M'$ mean? What does $M \simeq_{\text{anytype}} M'$ mean? In CBV with print, what can be said about the difference between the two relations?<br></latex>	pg 18786, def 1.9, proposition 5<br>in CBV there is no difference between these two relations.
Give the syntactic category T of "terminal terms" for CBN.	pg 18787, section 1.7.1.<br>Read proposition 6 as well<br><br><br><br>
<latex><br>State the definitions of the $\simeq_{\text{ground}}$ and $\simeq_{\text{anytype}}$ relations in CBN. Do these definitions differ any way from the corresponding relations in CBV?<br></latex>	pg 18787 near bottom, def 1.11<br><br>
Give CBN with print's big-step semantics for let, booleans, and sums.	pg 18788<br>
Give CBN with print's big-step semantics for abstractions, applications, and print.	pg 18788, figure 1.3<br><br>
<latex>~\\<br>Demonstrate that in CBN with print, $\simeq_{\text{anytype}}$ is strictly finer than $\simeq_{\text{ground}}$.<br> </latex>	pg 18788, prop 7<br><br>
<latex>~\\<br>In Levy's terminology, what is the difference between ``CBN'' and ``Lazy''.<br></latex>	pg 18789, Def 1.12<br>
In Levy's denotational semantics for CBN, what does a type denote?	<latex>~\\<br>Types denote $\mathcal A$-sets.\\<br>pg 18790<br></latex>
<latex>~\\<br>Let $X$ be a set. How do we define the \emph{free} $\mathcal A$-set on $X$?<br></latex>	pg 18790, def 1.14 (1)<br><br>
<latex>~\\<br>For an $i \in I$-indexed family of $\mathcal A$-sets $(\X_i, \ast)$, how do we define the $\mathcal A$-set $\Pi_{i \in I} (X_i,\ast)$?<br></latex>	pg 18790, def 1.14 (2)<br><br>
<latex>~\\<br>Let $X$ be a set and $(Y,\ast)$ and $\mathcal A$-set. How is the $\mathcal A$-set $X \to (Y,\ast)$ defined?<br></latex>	pg 18790, def 1.14 (3)<br>
What do contexts denote in Levy's "CBN with print"?	pg 18790 bottom / pg 18791 top<br>
State the Soundness theorem for Levy's "CBN with print".<br>	pg 18791<br>
Look at the interpretations of terms for Levy's CBN with print on pg 18791.<br>	pg 18791<br>
<latex>~\\<br>Let $(T, \eta, \mu)$ be a monad on a category $\mathcal C$. What is a $T$-algebra?<br></latex>	pg 18793, def 1.16<br><br>
<latex>~\\<br>What kind of a category do we use to interpret CBN with print?<br></latex>	a category of algebras and plain maps. see pg 18793 below def 1.16<br>
<latex>~\\<br>Let $(T,\eta,\mu,t)$ be a strong monad on a cartesian category $\mathcal C$. For an object $X$, what is the \emph{free} $T$-algebra on $X$?<br></latex>	pg 18793, very bottom of page<br>
<latex>~\\<br>Let $(T,\eta,\mu,t)$ be a strong monad on a cartesian category $\mathcal C$. For a family of $T$-algebras $\{ (X_i,\theta_i) \}_{i \in I}$, suppose $\{ X_i \}_{i \in I}$ has a given product in $\mathcal C$. Then what is the \emph{product} $T$-\emph{algebra} for $\{ (X_i,\theta_i) \}_{i \in I}$?<br></latex>	pg 18794<br>
<latex>~\\<br>Let $(T,\eta,\mu,t)$ be a strong monad on a cartesian category $\mathcal C$. For a $\mathcal C$-object $X$ and $T-algebra$ $(Y, \theta)$, suppose there is a given exponential in $\mathcal C$ from $X$ to $Y$. Then what is the \emph{exponential} $T$-\emph{algebra} from $X$ to $(Y,\theta)$?<br></latex>	pg 18794<br>
Show how to interpret "CBN with print" (pg 18788) in terms of a "category of algebras and plain maps" (pg 18793, see def 1.17 in particular).	pg 18794<br>
<latex>~\\<br>Give Levy's mutally recursive type syntax for the ``value type'' and ``computation type'' syntactic categories.<br></latex>	pg 18797<br>
<latex>~\\<br>How does Levy define the notion of a \emph{context}? <br></latex>	contexts only bind value types. No computation types allowed!<br>pg 18797<br>
<latex>~\\<br>Give Levy's cbpv typing rules for the return, thunk, and force constructs.<br></latex>	pg 18798, fig 2.1<br><br>
<latex>~\\<br>Give Levy's CBPV typing rules for:\\<br>- variables\\<br>- the let construct\\<br>- the ``M \mbf{to} x. N'' construct<br></latex>	pg 18798, fig 2.1<br><br>
<latex>~\\<br>Give the sum introduction and elimination typing rules for cbpv.<br></latex>	pg 18798<br>
Give introduction and elimination typing rules for cbpv's binary product type constructor. Give introduction and elimination rules for cbpv's I-indexed product type constructor.	pg 18798, figure 2.1.<br>
Give introduction and elimination typing rules for cbpv's function type constructor.	pg 18798, figure 2.1<br><br>
<latex>~\\<br>How does Levy define the notion of a \emph{returner}? A \emph{ground type}? \emph{ground value}? \emph{ground returner}?<br></latex>	pg 18798, def 2.2<br><br>
<latex>~\\<br>How does Levy define the syntax of \emph{terminal} terms for the basic cbpv language?<br></latex>	pg 18799, "T ::= "<br> <br>
<latex>~\\<br>Give the big-step rules for the basic CBPV language for:<br>\begin{itemize}<br>\item $\mbf{return}~V$<br>\item $\mbf{let}~V~\mbf{be}~x.~M$<br>\item $M~\mbf{to}~x.~N$<br>\item $\mbf{force}~\mbf{thunk}~M$<br>\end{itemize}<br></latex>	pg 18800<br>
<latex>~\\<br>Give the big-step rules for the basic CBPV language for:<br>\begin{itemize}<br>\item $\mbf{pm}~(\hat{\iota}, V)~\mbf{as}~\{ \ldots, (i,x).M_i, \ldots \}$<br>\item $\mbf{pm}~(V,V')~\mbf{as}~(x,y).M$<br>\item $\lambda \{ \ldots, i.M_i, \ldots \}$<br>\item $\hat{\iota}`M$<br>\item $V`M$<br>\end{itemize}<br></latex>	pg 18800<br>
<latex>~\\<br>How does Levy write a configuration of a CK machine?<br></latex><br><br>	<latex>~\\<br>$M~\underline{B}~K~C$, where:<br>\begin{itemize}<br>\item $M$ is the computation we are currently evaluating<br>\item $\underline{B}$ is the type of $M$<br>\item $K$ is the control stack<br>\item $\underline{C}$ is the type of the initial computation (stays fixed throughout computation)<br>\end{itemize}<br>pg 18801<br></latex>
Read section 2.3.2, starting on pg 18801<br>	<br>
<latex>~\\<br>If we want to evaluate $\vdash^c M : \underline{C}$, what is the initial configuration of our CK machine?<br></latex>	pg 18803<br>
<latex>~\\<br>Give the CK-machine transition rule for the computation $\mbf{let}~V~\mbf{be}~x.~M$.<br></latex>	pg 18803<br>
<latex>~\\<br>Give the CK-machine transition rule for the computation $M~\mbf{to}~x.~N$.<br></latex>	pg 18803<br>
<latex>~\\<br>Give the CK-machine transition rule for  $\mbf{return}~V$.\\~\\<br>Give the CK-machine transition rule for  $\mbf{force}~\mbf{thunk}~V$.\\~\\<br>Give the CK-machine transition rule for  $\mbf{pm}~(\hat{\iota},V)~\mbf{as}~\{\ldots,(i,x).M_i,\ldots\}$.\\~\\<br>Give the CK-machine transition rule for $\mbf{pm}~(V,V')~\mbf{as}~(x,y).M$.\\~\\<br></latex>	pg 18803
<latex>~\\<br>Give the CK-machine transition rule for  $\hat{\iota}`M$.\\~\\<br>Give the CK-machine transition rule for  $\lambda \{ \ldots, i.M_i, \ldots \}$.\\~\\<br>Give the CK-machine transition rule for  $V`M$.\\~\\<br>Give the CK-machine transition rule for $\lambda x.M$.\\~\\<br></latex>	pg 18803<br>
<latex>~\\<br>List all of the possible terminal configurations for the CK machine with open terms-in-contexts.<br></latex>	pg 18804, fig 2.4<br>
<latex>~\\<br>Give CK-machine stack typing rules for stacks of the following forms.<br>\begin{itemize}<br>\item $nil$<br>\item $\hat{\iota}$~:: K<br>\item $[\cdot]~\mbf{to}~x. M~::~K$<br>\item $V~::~K$<br>\end{itemize}<br></latex>	pg 18804, fig 2.5<br>
<latex>~\\<br>What does Levy mean when he writes ``A configuration from $\Gamma$ to $\underline{C}$''?<br></latex>	pg 18804, def 2.3<br><br>
<latex>~\\<br>In the semantics of a standard language with dynamic allocation, we need two basic pieces of information to describe the state of a program's memory. What are they?<br></latex>	the world and the store<br>pg 18883<br>
<latex>~\\<br>Give the CBPV typing rule for assigning to a cell. Give the CBPV typing rule for reading a cell. Give the CBPV typing rule for generating a new cell. Give the recursive version of the rule for generating a new cell.<br></latex>	pg 18884<br>
<latex>~\\<br>Give the CBPV equality inference rule for judging two reference cells as equal.<br></latex>	pg 18885
<latex>~\\<br>How does Levy define the notion of a \emph{world} for cbpv's state model?<br></latex>	pg 18885, def 6.1 (1)<br><br><br>
<latex>~\\<br>If $w$ is a world, what does $\mathit{cells}~w$ denote?<br></latex>	pg 18885<br>terminology I.4.1 on pg 18761<br>
<latex>~\\<br>What does the \emph{empty world} $0$ denote? <br></latex>	pg 18885 def 6.1 (3)<br>
<latex>~\\<br>Let $w$ be a world. Formally, what does the phrase $w$ \emph{extended with an} $A$-storing cell mean?<br></latex>	pg 18885, def 6.1 (4)<br>
<latex>~\\<br>What does the symbol $\mathcal W$ denote in Levy's CBPV with dynamically allocated state?<br></latex>	pg 18886, top<br>
<latex>~\\<br>What is the CBPV typing rule for cell values?<br></latex>	pg 18886 (6.1)<br>
Read proposition 58 on pg 18886<br>	<br>
<latex>~\\<br>Let $w$ be a world. What is a $w$-\emph{store}?<br></latex>	pg 18886, def 6.2 (1)<br>
<latex>~\\<br>Let $(w,s)$ be a world-store and let $A$ be a value type. If $l$ is an $A$-storing cell in $w$, what does the phrase \emph{the contents of cell} $l$ mean?<br></latex>	pg 18886, def 6.3 (1)<br><br>
<latex>~\\<br>Let $(w,s)$ be a world-store and let $A$ be a value type. If $l$ is an $A$-storing cell in $w$ and $w \mid \vdash V : A$, what does the phrase \emph{s with cell l assigned to V} mean?<br></latex>	pg 18886, def 6.3 "assignment"<br>
